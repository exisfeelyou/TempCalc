import platform, os, sys, json
from typing import Dict, Any, List, Tuple
from subprocess import call

def install_libs():
    libs = [
        ("numpy", "numpy"),
        ("scipy", "scipy"),
        ("telegram", "python-telegram-bot"),
        ("dotenv", "python-dotenv")
    ]

    for pkg, inst in libs:
        try: __import__(pkg)
        except ImportError:
            print("")
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {pkg} ({inst})")
            call([sys.executable, "-m", "pip", "install", inst])

install_libs()

from reactor import ThermalReactor, handle_temperatures, parse_temperatures
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤
with open('assets/reactors.json', 'r') as f:
    REACTORS_DB = json.load(f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
active_outputs = {}  # {reactor_id: {"message": message_text, "temps": {"current": [...], "target": float}, "corrections": [...]}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
user_ranges = {}  # {user_id: {'B': (min, max), 'C': (min, max), 'D': (min, max)}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥")],
        [KeyboardButton("üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã")],
        [KeyboardButton("üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

def parse_range(input_str: str) -> Tuple[float, float]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    try:
        values = input_str.strip().split()
        if len(values) != 2:
            raise ValueError
        
        start = float(values[0].replace(',', '.'))
        end = float(values[1].replace(',', '.'))
        
        return start, end
    except:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º")

async def show_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_id not in user_ranges:
        user_ranges[user_id] = {
            'B': (2, 0),
            'C': (1, -1),
            'D': (0, -1)
        }
    
    keyboard = [
        [
            InlineKeyboardButton("–ë", callback_data="range_B"),
            InlineKeyboardButton("–¶", callback_data="range_C"),
            InlineKeyboardButton("–î", callback_data="range_D")
        ],
        [
        InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω —Å—Ä–∞–∑—É", callback_data="set_range_all")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    ranges = user_ranges[user_id]
    message = "–†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è—Ö:\n\n"
    message += f"–ë: –æ—Ç {'+' if ranges['B'][0] > 0 else ''}{ranges['B'][0]} –¥–æ {'+' if ranges['B'][1] > 0 else ''}{ranges['B'][1]}.\n"
    message += f"–¶: –æ—Ç {'+' if ranges['C'][0] > 0 else ''}{ranges['C'][0]} –¥–æ {'+' if ranges['C'][1] > 0 else ''}{ranges['C'][1]}.\n"
    message += f"–î: –æ—Ç {'+' if ranges['D'][0] > 0 else ''}{ranges['D'][0]} –¥–æ {'+' if ranges['D'][1] > 0 else ''}{ranges['D'][1]}."
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def set_range_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω —Å—Ä–∞–∑—É"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–º–∞–∫—Å_–ë –º–∏–Ω_–ë –º–∞–∫—Å_–¶ –º–∏–Ω_–¶ –º–∞–∫—Å_–î –º–∏–Ω_–î</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>+5 0 +1 -1 0 -2</code>\n"
        "–∏–ª–∏: <code>5 0 1 -1 0 -2</code>",
        parse_mode='HTML'
    )
    
    context.user_data['state'] = 'waiting_all_ranges'

async def process_all_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω"""
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ —á–∏—Å–ª–∞
        values = update.message.text.strip().split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        if len(values) != 6:
            raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 6 —á–∏—Å–µ–ª")
            
        # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ +
        def parse_value(val: str) -> float:
            val = val.strip()
            if val.startswith('+'):
                val = val[1:]
            return float(val)
            
        try:
            ranges = [parse_value(v) for v in values]
        except ValueError:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞–∫—Å–∏–º—É–º—ã –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–æ–≤
        if not all(ranges[i] >= ranges[i+1] for i in [0,2,4]):
            raise ValueError("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É")
            
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        user_ranges = {
            'B': [ranges[0], ranges[1]],
            'C': [ranges[2], ranges[3]],
            'D': [ranges[4], ranges[5]]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        user_id = update.effective_user.id
        if user_id not in user_ranges_dict:
            user_ranges_dict[user_id] = {}
        user_ranges_dict[user_id] = user_ranges
        
        await update.message.reply_text(
            "‚úÖ –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n\n"
            f"–ë: –æ—Ç {ranges[1]:+.1f} –¥–æ {ranges[0]:+.1f}\n"
            f"–¶: –æ—Ç {ranges[3]:+.1f} –¥–æ {ranges[2]:+.1f}\n"
            f"–î: –æ—Ç {ranges[5]:+.1f} –¥–æ {ranges[4]:+.1f}"
        )
        
        del context.user_data['state']
        
    except ValueError as e:
        await update.message.reply_text(str(e))

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—å:
if state == 'waiting_all_ranges':
    await process_all_ranges(update, context)
    return

async def show_active_outputs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_outputs:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.")
        return
    
    keyboard = []
    for reactor_id in active_outputs:
        keyboard.append([InlineKeyboardButton(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_id}", callback_data=f"show_{reactor_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:", reply_markup=reply_markup)

def validate_reactor_number(reactor_number: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –∫–∞–∫ ID –∏–ª–∏ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if reactor_number in REACTORS_DB['reactors']:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ ID (1-1, 1-2, etc.)
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (11, 12, etc.)
    for reactor_data in REACTORS_DB['reactors'].values():
        if reactor_data['alt'] == reactor_number:
            return True
    return False

def get_reactor_mode(reactor_number: str) -> str:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ ID, –ø–æ—Ç–æ–º –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if reactor_number in REACTORS_DB['reactors']:
        return REACTORS_DB['reactors'][reactor_number]['mode']
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞–∫ ID, –∏—â–µ–º –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    for reactor_data in REACTORS_DB['reactors'].values():
        if reactor_data['alt'] == reactor_number:
            return reactor_data['mode']
    return 'pc'  # default mode

def get_reactor_id(reactor_number: str) -> str:
    # –ï—Å–ª–∏ —ç—Ç–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if reactor_number in REACTORS_DB['reactors']:
        return reactor_number
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID
    for reactor_id, reactor_data in REACTORS_DB['reactors'].items():
        if reactor_data['alt'] == reactor_number:
            return reactor_id
    return reactor_number

async def handle_range_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    zone = query.data.split('_')[1]
    context.user_data['editing_range'] = zone
    
    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–º–∏–Ω –º–∞–∫—Å</code>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0</code>",
        parse_mode='HTML'
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("show_"):
        reactor_id = query.data.split("_")[1]
        if reactor_id in active_outputs:
            output_data = active_outputs[reactor_id]
            keyboard = [
                [
                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞–Ω–∞–ª–∞", callback_data=f"finish_{reactor_id}"),
                    InlineKeyboardButton("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥–∏–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data=f"edit_{reactor_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(output_data["message"], reply_markup=reply_markup, parse_mode='HTML')
    
    elif query.data.startswith("edit_"):
        reactor_id = query.data.split("_")[1]
        if reactor_id in active_outputs:
            context.user_data['editing_reactor'] = reactor_id
            current_temps = active_outputs[reactor_id]["temps"]["current"]
            target_temp = active_outputs[reactor_id]["temps"]["target"]
            
            await query.message.reply_text(
                f"–†–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>\n\n"
                f"‚åõÔ∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ë –¶ –î): <code>{' '.join(f'{temp:.1f}' for temp in current_temps)}</code>\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é: <code>{target_temp:.1f}</code>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä]\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2</code>\n"
                "–∏–ª–∏: <code>1008,5 1003,7 1001,2</code>",
                parse_mode='HTML'
            )
    
    elif query.data.startswith("finish_"):
        reactor_id = query.data.split("_")[1]
        if reactor_id in active_outputs:
            del active_outputs[reactor_id]
            await query.message.edit_text(f"–í—ã–≤–æ–¥ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
    
    elif query.data.startswith("range_"):
        await handle_range_callback(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥":
        await update.message.reply_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞:\n\n"
            "<blockquote>–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "‚Ä¢ <code>1-1</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>11</code>\n"
            "‚Ä¢ <code>1-2</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>12</code>\n"
            "‚Ä¢ <code>1-3</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>13</code></blockquote>",
            parse_mode='HTML'
        )
        context.user_data['state'] = 'waiting_reactor_number'
    
    elif text == "üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã":
        await show_active_outputs(update, context)
        
    elif text == "üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω":
        await show_ranges(update, context)
    
    elif 'editing_range' in context.user_data:
        try:
            zone = context.user_data['editing_range']
            start, end = parse_range(text)
            
            user_id = update.effective_user.id
            if user_id not in user_ranges:
                user_ranges[user_id] = {}
            
            user_ranges[user_id][zone] = (start, end)
            del context.user_data['editing_range']
            
            await update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await show_ranges(update, context)
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
    
    elif context.user_data.get('state') == 'waiting_reactor_number':
        reactor_number = text.strip()
        
        if not validate_reactor_number(reactor_number):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-X (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1-1</code>) –∏–ª–∏ XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>11</code>).",
                parse_mode='HTML'
            )
            return
            
        mode = get_reactor_mode(reactor_number)
        reactor_id = get_reactor_id(reactor_number)
        context.user_data['current_reactor'] = reactor_id
        context.user_data['mode'] = mode
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω —Ä–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä] [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2 1000.0</code>\n"
            "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1000,0</code>",
            parse_mode='HTML'
        )
        context.user_data['state'] = 'waiting_temperatures'
    
    elif context.user_data.get('state') == 'waiting_temperatures' or 'editing_reactor' in context.user_data:
        reactor_id = context.user_data.get('editing_reactor') or context.user_data.get('current_reactor')
        try:
            await handle_temperatures(update, context, reactor_id, active_outputs, user_ranges)
            if 'editing_reactor' in context.user_data:
                del context.user_data['editing_reactor']
        except ValueError as e:
            await update.message.reply_text(str(e), parse_mode='HTML')

def main():
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()