import platform, os, sys, json
from typing import Dict, Any, List, Tuple
from subprocess import call

def install_libs():
    libs = [
        ("numpy", "numpy"),
        ("scipy", "scipy"),
        ("telegram", "python-telegram-bot"),
        ("dotenv", "python-dotenv")
    ]

    for pkg, inst in libs:
        try: __import__(pkg)
        except ImportError:
            print("")
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {pkg} ({inst})")
            call([sys.executable, "-m", "pip", "install", inst])

install_libs()

from reactor import ThermalReactor, handle_temperatures, parse_temperatures, DEFAULT_RANGES
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤
with open('assets/reactors.json', 'r') as f:
    REACTORS_DB = json.load(f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
active_outputs = {}  # {reactor_id: {"message": message_text, "temps": {"current": [...], "target_temps": [...]}, "corrections": [...], "final_temps": [...]}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
user_ranges = {}  # {user_id: {'B': (min, max), 'C': (min, max), 'D': (min, max)}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤
reactor_specific_ranges = {}  # {user_id: {reactor_id: {'B': (min, max), 'C': (min, max), 'D': (min, max)}}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥")],
        [KeyboardButton("üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã")],
        [KeyboardButton("üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def show_active_outputs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_outputs:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤")
        return
        
    keyboard = []
    for reactor_id in active_outputs:
        keyboard.append([InlineKeyboardButton(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_id}", callback_data=f"show_{reactor_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ç–æ—Ä:", reply_markup=reply_markup)

def parse_range(input_str: str) -> Tuple[float, float]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    try:
        values = input_str.strip().split()
        if len(values) != 2:
            raise ValueError
        
        start = float(values[0].replace(',', '.'))
        end = float(values[1].replace(',', '.'))
        
        return start, end
    except:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º")

async def show_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_id not in user_ranges:
        user_ranges[user_id] = {
            'B': (DEFAULT_RANGES[0], DEFAULT_RANGES[1]),
            'C': (DEFAULT_RANGES[2], DEFAULT_RANGES[3]),
            'D': (DEFAULT_RANGES[4], DEFAULT_RANGES[5])
        }
    
    ranges = user_ranges[user_id]
    message = "üåê –û–±—â–∏–µ —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n\n"
    message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
    message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
    message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
    
    keyboard = [
        [
            InlineKeyboardButton("–ë", callback_data="range_B"),
            InlineKeyboardButton("–¶", callback_data="range_C"),
            InlineKeyboardButton("–î", callback_data="range_D")
        ],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω —Å—Ä–∞–∑—É", callback_data="range_all")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤ —Å –æ—Å–æ–±—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    if user_id in reactor_specific_ranges:
        message += "\n\nüìç –†–µ–∞–∫—Ç–æ—Ä—ã —Å –æ—Å–æ–±—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏:"
        for reactor_id in reactor_specific_ranges[user_id]:
            keyboard.append([
                InlineKeyboardButton(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_id}", 
                                   callback_data=f"show_reactor_ranges_{reactor_id}")
            ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

def validate_reactor_number(reactor_number: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –∫–∞–∫ ID –∏–ª–∏ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if reactor_number in REACTORS_DB['reactors']:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ ID (1-1, 1-2, etc.)
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (11, 12, etc.)
    for reactor_data in REACTORS_DB['reactors'].values():
        if reactor_data['alt'] == reactor_number:
            return True
    return False

def get_reactor_mode(reactor_number: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Args:
        reactor_number: –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-X –∏–ª–∏ XX
    Returns:
        str: —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Raises:
        ValueError: –µ—Å–ª–∏ —Ä–µ–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ ID
    if reactor_number in REACTORS_DB['reactors']:
        return REACTORS_DB['reactors'][reactor_number]['mode']
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞–∫ ID, –∏—â–µ–º –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    for reactor_data in REACTORS_DB['reactors'].values():
        if reactor_data['alt'] == reactor_number:
            return reactor_data['mode']
            
    raise ValueError(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def get_reactor_id(reactor_number: str) -> str:
    # –ï—Å–ª–∏ —ç—Ç–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if reactor_number in REACTORS_DB['reactors']:
        return reactor_number
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID
    for reactor_id, reactor_data in REACTORS_DB['reactors'].items():
        if reactor_data['alt'] == reactor_number:
            return reactor_id
    return reactor_number

async def handle_range_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    zone = query.data.split('_')[1]
    context.user_data['editing_range'] = zone
    
    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–º–∏–Ω –º–∞–∫—Å</code>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0</code>",
        parse_mode='HTML'
    )

async def set_range_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['state'] = 'waiting_all_ranges'
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0 +1 -1 0 -1</code>",
        parse_mode='HTML'
    )

async def process_all_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        values = [float(x.replace(',', '.')) for x in update.message.text.strip().split()]
        if len(values) != 6:
            raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ 6 —á–∏—Å–µ–ª")
        
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞
        if 'setting_reactor_ranges' in context.user_data:
            reactor_id = context.user_data['setting_reactor_ranges']
            if user_id not in reactor_specific_ranges:
                reactor_specific_ranges[user_id] = {}
            
            reactor_specific_ranges[user_id][reactor_id] = {
                'B': (values[0], values[1]),
                'C': (values[2], values[3]),
                'D': (values[4], values[5])
            }
            del context.user_data['setting_reactor_ranges']
            await update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if user_id not in user_ranges:
                user_ranges[user_id] = {}
            
            user_ranges[user_id]['B'] = (values[0], values[1])
            user_ranges[user_id]['C'] = (values[2], values[3])
            user_ranges[user_id]['D'] = (values[4], values[5])
            
            if 'state' in context.user_data:
                del context.user_data['state']
            
            await update.message.reply_text("‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        await show_ranges(update, context)
        
    except ValueError as e:
        await update.message.reply_text(str(e))
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.clear()

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if query.data.startswith("show_"):
            if query.data.startswith("show_reactor_ranges_"):
                reactor_id = query.data.split("_")[3]
                user_id = update.effective_user.id
                
                if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                    ranges = reactor_specific_ranges[user_id][reactor_id]
                    message = f"üìç –û—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id}:\n\n"
                    message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                    message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                    message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã", 
                                               callback_data=f"set_reactor_ranges_{reactor_id}"),
                            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã", 
                                               callback_data=f"delete_reactor_ranges_{reactor_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup)
            else:
                reactor_id = query.data.split("_")[1]
                if reactor_id in active_outputs:
                    output_data = active_outputs[reactor_id]
                    keyboard = [
                        [
                            InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞–Ω–∞–ª–∞", callback_data=f"finish_{reactor_id}"),
                            InlineKeyboardButton("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥–∏–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data=f"edit_{reactor_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(output_data["message"], reply_markup=reply_markup, parse_mode='HTML')
        
        elif query.data.startswith("edit_"):
            reactor_id = query.data.split("_")[1]
            if reactor_id in active_outputs:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
                current_mode = context.user_data.get('mode')
                
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –∏ –¥–æ–±–∞–≤–ª—è–µ–º editing_reactor
                if current_mode:
                    context.user_data['mode'] = current_mode
                # –ï—Å–ª–∏ mode –Ω–µ –±—ã–ª –≤ context.user_data, –±–µ—Ä–µ–º –µ–≥–æ –∏–∑ active_outputs
                elif 'mode' in active_outputs[reactor_id]:
                    context.user_data['mode'] = active_outputs[reactor_id]['mode']
                
                context.user_data['editing_reactor'] = reactor_id
                current_temps = active_outputs[reactor_id]["temps"]["current"]
                target_temps = active_outputs[reactor_id]["temps"]["target_temps"]
                
                await query.message.reply_text(
                    f"–†–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>\n\n"
                    f"‚åõÔ∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ë –¶ –î): <code>{' '.join(f'{temp:.1f}' for temp in current_temps)}</code>\n\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–¥–∞–Ω–∏—è (–ë –¶ –î): <code>{' '.join(f'{temp:.1f}' for temp in target_temps)}</code>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2</code>",
                    parse_mode='HTML'
                )
        
        elif query.data.startswith("finish_"):
            reactor_id = query.data.split("_")[1]
            if reactor_id in active_outputs:
                del active_outputs[reactor_id]
                await query.message.edit_text(f"–í—ã–≤–æ–¥ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
        
        elif query.data.startswith("set_reactor_ranges_"):
            reactor_id = query.data.split("_")[3]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_mode = context.user_data.get('mode')
            context.user_data.clear()
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if current_mode:
                context.user_data['mode'] = current_mode
            context.user_data['setting_reactor_ranges'] = reactor_id
            await query.message.reply_text(
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id}\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0 +1 -1 0 -1</code>",
                parse_mode='HTML'
            )
            
        elif query.data.startswith("delete_reactor_ranges_"):
            reactor_id = query.data.split("_")[3]
            user_id = update.effective_user.id
            
            if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                del reactor_specific_ranges[user_id][reactor_id]
                if not reactor_specific_ranges[user_id]:  # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∞–∫—Ç–æ—Ä
                    del reactor_specific_ranges[user_id]
                
                await query.message.edit_text(
                    f"‚úÖ –û—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É–¥–∞–ª–µ–Ω—ã"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                await show_ranges(update, context)
        
        elif query.data.startswith("range_"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_mode = context.user_data.get('mode')
            if query.data == "range_all":
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if current_mode:
                    context.user_data['mode'] = current_mode
                await set_range_all(update, context)
            else:
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if current_mode:
                    context.user_data['mode'] = current_mode
                await handle_range_callback(update, context)

    except Exception as e:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode='HTML')
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫—Ä–æ–º–µ mode
        current_mode = context.user_data.get('mode')
        context.user_data.clear()
        if current_mode:
            context.user_data['mode'] = current_mode

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –æ–¥–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if text in ["‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥", "üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã", "üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω"]:
            # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            context.user_data.clear()
            
        if text == "‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥":
            await update.message.reply_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞:\n\n"
                "<blockquote>–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                "‚Ä¢ <code>1-1</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>11</code>\n"
                "‚Ä¢ <code>1-2</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>12</code>\n"
                "‚Ä¢ <code>1-3</code> –∏–ª–∏ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <code>13</code></blockquote>",
                parse_mode='HTML'
            )
            context.user_data['state'] = 'waiting_reactor_number'
        
        elif text == "üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã":
            await show_active_outputs(update, context)
            
        elif text == "üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω":
            await show_ranges(update, context)
        
        elif context.user_data.get('state') == 'waiting_all_ranges':
            try:
                await process_all_ranges(update, context)
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if 'state' in context.user_data:
                    del context.user_data['state']
        
        elif 'editing_range' in context.user_data:
            try:
                zone = context.user_data['editing_range']
                start, end = parse_range(text)
                
                user_id = update.effective_user.id
                if user_id not in user_ranges:
                    user_ranges[user_id] = {}
                
                user_ranges[user_id][zone] = (start, end)
                del context.user_data['editing_range']
                
                await update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                await show_ranges(update, context)
                
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if 'editing_range' in context.user_data:
                    del context.user_data['editing_range']
        
        elif context.user_data.get('state') == 'waiting_reactor_number':
            try:
                reactor_number = text.strip()
                
                if not validate_reactor_number(reactor_number):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-X (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1-1</code>) –∏–ª–∏ XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>11</code>).",
                        parse_mode='HTML'
                    )
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if 'state' in context.user_data:
                        del context.user_data['state']
                    return
                    
                reactor_id = get_reactor_id(reactor_number)
                if reactor_id in active_outputs:
                    await update.message.reply_text(
                        f"‚ùå –†–µ–∞–∫—Ç–æ—Ä <code>{reactor_id}</code> —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è!\n"
                        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞.",
                        parse_mode='HTML'
                    )
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if 'state' in context.user_data:
                        del context.user_data['state']
                    return
                    
                mode = get_reactor_mode(reactor_number)
                context.user_data['current_reactor'] = reactor_id
                context.user_data['mode'] = mode

                user_id = update.effective_user.id
                ranges_message = ""
                keyboard = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞
                if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                    ranges = reactor_specific_ranges[user_id][reactor_id]
                    ranges_message = "\nüìç –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n"
                    ranges_message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                    ranges_message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                    ranges_message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                else:
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞", 
                                callback_data=f"set_reactor_ranges_{reactor_id}"
                            )
                        ]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω —Ä–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>{ranges_message}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä] [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1000,0</code>\n"
                    "–∏–ª–∏: <code>1008.5 1003.7 1001.2 1040.0 1000.0 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1040,0 1000,0 1000,0</code>",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                context.user_data['state'] = 'waiting_temperatures'
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}", parse_mode='HTML')
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if 'state' in context.user_data:
                    del context.user_data['state']
        
        elif context.user_data.get('state') == 'waiting_temperatures' or 'editing_reactor' in context.user_data:
            try:
                reactor_id = context.user_data.get('editing_reactor') or context.user_data.get('current_reactor')
                await handle_temperatures(
                    update, 
                    context, 
                    reactor_id, 
                    active_outputs, 
                    user_ranges, 
                    reactor_specific_ranges
                )
                if 'editing_reactor' in context.user_data:
                    del context.user_data['editing_reactor']
            except ValueError as e:
                await update.message.reply_text(str(e), parse_mode='HTML')
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if 'state' in context.user_data:
                    del context.user_data['state']
                if 'editing_reactor' in context.user_data:
                    del context.user_data['editing_reactor']
        
        elif 'setting_reactor_ranges' in context.user_data:
            try:
                values = [float(x.replace(',', '.')) for x in text.strip().split()]
                if len(values) != 6:
                    raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ 6 —á–∏—Å–µ–ª")
                
                user_id = update.effective_user.id
                reactor_id = context.user_data['setting_reactor_ranges']
                
                if user_id not in reactor_specific_ranges:
                    reactor_specific_ranges[user_id] = {}
                
                reactor_specific_ranges[user_id][reactor_id] = {
                    'B': (values[0], values[1]),
                    'C': (values[2], values[3]),
                    'D': (values[4], values[5])
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ranges = reactor_specific_ranges[user_id][reactor_id]
                ranges_message = "\nüìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n"
                ranges_message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                ranges_message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                ranges_message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞
                mode = get_reactor_mode(reactor_id)
                
                del context.user_data['setting_reactor_ranges']
                context.user_data['state'] = 'waiting_temperatures'
                context.user_data['current_reactor'] = reactor_id
                context.user_data['mode'] = mode  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ context.user_data
                
                await update.message.reply_text(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                    f"{ranges_message}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä] [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1000,0</code>\n"
                    "–∏–ª–∏: <code>1008.5 1003.7 1001.2 1040.0 1000.0 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1040,0 1000,0 1000,0</code>",
                    parse_mode='HTML'
                )
                
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                if 'setting_reactor_ranges' in context.user_data:
                    del context.user_data['setting_reactor_ranges']

    except Exception as e:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode='HTML')
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.clear()

def main():
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
