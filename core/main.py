import platform, os, sys, json, re
from typing import Dict, Any, List, Tuple
from subprocess import call

def install_libs():
    libs = [
        ("numpy", "numpy"),
        ("scipy", "scipy"),
        ("telegram", "python-telegram-bot"),
        ("dotenv", "python-dotenv")
    ]

    for pkg, inst in libs:
        try: __import__(pkg)
        except ImportError:
            print("")
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {pkg} ({inst})")
            call([sys.executable, "-m", "pip", "install", inst])

install_libs()

from reactor import ThermalReactor, handle_temperatures, parse_temperatures, DEFAULT_RANGES
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

load_dotenv()

def load_reactors_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤"""
    global REACTORS_DB
    try:
        with open('assets/reactors.json', 'r', encoding='utf-8') as f:
            REACTORS_DB = json.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        for reactor_id, data in REACTORS_DB['reactors'].items():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ alt —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(data['alt'], str):
                data['alt'] = [data['alt']]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ (—É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
            data['id'] = data['id'].strip()
            data['alt'] = [alt.strip() for alt in data['alt']]
            
    except Exception as e:
        raise

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
load_reactors_db()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
active_outputs = {}  # {reactor_id: {"message": message_text, "temps": {"current": [...], "target_temps": [...]}, "corrections": [...], "final_temps": [...]}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
user_ranges = {}  # {user_id: {'B': (min, max), 'C': (min, max), 'D': (min, max)}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤
reactor_specific_ranges = {}  # {user_id: {reactor_id: {'B': (min, max), 'C': (min, max), 'D': (min, max)}}}

def is_valid_format(reactor_number: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞ –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    
    –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - –¢–ú-–ù, –¢–ú-–í (–∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å –¥–µ—Ñ–∏—Å–æ–º)
    - –¢–ú–ù, –¢–ú–í (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞)
    - —Ç–º-–Ω, —Ç–º-–≤ (—Å—Ç—Ä–æ—á–Ω—ã–µ —Å –¥–µ—Ñ–∏—Å–æ–º)
    - —Ç–º–Ω, —Ç–º–≤ (—Å—Ç—Ä–æ—á–Ω—ã–µ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞)
    - –¢–º-–Ω, –¢–º-–≤ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π, —Å –¥–µ—Ñ–∏—Å–æ–º)
    - –¢–º–Ω, –¢–º–≤ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π, –±–µ–∑ –¥–µ—Ñ–∏—Å–∞)
    - YY-Y (–≥–¥–µ Y - —Ü–∏—Ñ—Ä—ã)
    - YYY (–≥–¥–µ Y - —Ü–∏—Ñ—Ä—ã)
    - Y-Y (–≥–¥–µ Y - —Ü–∏—Ñ—Ä—ã)
    - YY (–≥–¥–µ Y - —Ü–∏—Ñ—Ä—ã)
    """
    if not reactor_number:
        return False
        
    # –ë—É–∫–≤–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¢–ú-–ù –∏ –¢–ú-–í
    special_patterns = [
        r'^–¢–ú-[–ù–í]$',      # –¢–ú-–ù –∏–ª–∏ –¢–ú-–í
        r'^–¢–ú[–ù–í]$',       # –¢–ú–ù –∏–ª–∏ –¢–ú–í
        r'^—Ç–º-[–Ω–≤]$',      # —Ç–º-–Ω –∏–ª–∏ —Ç–º-–≤
        r'^—Ç–º[–Ω–≤]$',       # —Ç–º–Ω –∏–ª–∏ —Ç–º–≤
        r'^–¢–º-[–Ω–≤]$',      # –¢–º-–Ω –∏–ª–∏ –¢–º-–≤
        r'^–¢–º[–Ω–≤]$'        # –¢–º–Ω –∏–ª–∏ –¢–º–≤
    ]
    
    # –ß–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    number_patterns = [
        r'^\d{2}-\d$',    # YY-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11-1)
        r'^\d{3}$',       # YYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 111)
        r'^\d-\d$',       # Y-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-1)
        r'^\d{2}$'        # YY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11)
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in special_patterns:
        if re.match(pattern, reactor_number):
            return True
            
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in number_patterns:
        if re.match(pattern, reactor_number):
            return True
    
    return False

def get_reactor_id(reactor_number: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID —Ä–µ–∞–∫—Ç–æ—Ä–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.
    Args:
        reactor_number: –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞
    Returns:
        str: ID —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    reactor_number = reactor_number.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if reactor_number in REACTORS_DB['reactors']:
        return reactor_number

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID
    for reactor_id, reactor_data in REACTORS_DB['reactors'].items():
        alt_values = reactor_data['alt']
        if not isinstance(alt_values, list):
            alt_values = [alt_values]
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        for alt in alt_values:
            if reactor_number == alt.strip():
                return reactor_id
                
    return reactor_number

def validate_reactor_number(reactor_number: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    if not reactor_number:
        raise ValueError("‚ùå –ù–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
    reactor_number = reactor_number.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not is_valid_format(reactor_number):
        raise ValueError(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –ë—É–∫–≤–µ–Ω–Ω—ã–µ: –¢–ú-–ù, –¢–ú–ù, —Ç–º-–Ω, —Ç–º–Ω\n"
            "‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ: Y-Y, YY-Y, YY –∏–ª–∏ YYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-1, 11-1, 11 –∏–ª–∏ 111)"
        )
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –∫–∞–∫ –µ—Å—Ç—å
    if reactor_number in REACTORS_DB['reactors']:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ alt
    for reactor_id, reactor_data in REACTORS_DB['reactors'].items():
        alt = reactor_data['alt']
        if isinstance(alt, list) and reactor_number in alt:
            return True
        elif isinstance(alt, str) and reactor_number == alt:
            return True
    
    raise ValueError(
        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞."
    )

def get_reactor_mode(reactor_number: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Args:
        reactor_number: –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞
    Returns:
        str: —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    reactor_id = get_reactor_id(reactor_number)
    
    if reactor_id in REACTORS_DB['reactors']:
        return REACTORS_DB['reactors'][reactor_id]['mode']
        
    raise ValueError(
        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥")],
        [KeyboardButton("üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã")],
        [KeyboardButton("üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def show_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥", callback_data="instruction_new_output")],
        [InlineKeyboardButton("üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã", callback_data="instruction_current_outputs")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω", callback_data="instruction_ranges")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>"
    
    if update.callback_query:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ callback (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
        await update.callback_query.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

async def show_new_output_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructions = """
<b>‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–æ–≤—ã–π –≤—ã–≤–æ–¥</b>

<b>1Ô∏è‚É£ <u>–®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞</u></b>
üîª –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
<blockquote>‚ñ™Ô∏è –ë—É–∫–≤–µ–Ω–Ω—ã–µ: <code>–¢–º–Ω</code>, <code>–¢–ú–ù</code>, <code>—Ç–º–Ω</code> (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ <code>–¢–ú-–ù</code>). –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ <code>–¢–º-–Ω</code> –∏ <code>—Ç–º-–Ω</code>
‚ñ™Ô∏è –¶–∏—Ñ—Ä–æ–≤—ã–µ: <code>52</code>, <code>132</code> (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤ <code>5-2</code> –∏ <code>13-2</code>)

‚ñ´Ô∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª <code>13-2</code>, —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â—ë–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞: <code>132</code>. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–∞–Ω–∞–ª <code>5-2</code>, —Ç–æ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <code>52</code> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ.</blockquote>

<b>2Ô∏è‚É£ <u>–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</u></b>
üîª –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
<blockquote>‚ñ™Ô∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞</b> - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞"
‚ñ™Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–æ–±—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤</blockquote>

‚Ä¢ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞":
<blockquote>1. –í–≤–µ–¥–∏—Ç–µ 6 —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   <code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>
2. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>+2 0 +1 -1 0 -1</code>
3. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
4. –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä</blockquote>

<b>3Ô∏è‚É£ <u>–®–∞–≥ 3: –í–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä</u></b>
üîª –§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:
<blockquote>‚ñ™Ô∏è –ë–∞–∑–æ–≤—ã–π: <code>[—Ç—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã] [–æ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]</code>
‚ñ™Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π: <code>[—Ç—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã] [—Ç—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–¥–∞–Ω–∏—è]</code>
üîπ –ü—Ä–∏–º–µ—Ä—ã:
‚ñ™Ô∏è <code>1008.5 1003.7 1001.2 1000.0</code>
‚ñ™Ô∏è <code>1008,5 1003,7 1001,2 1000,0</code>
‚ñ™Ô∏è <code>1008.5 1003.7 1001.2 1040.0 1000.0 1000.0</code></blockquote>

<b>4Ô∏è‚É£ <u>–®–∞–≥ 4: –ü–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫</u></b>
üîª –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç:
<blockquote>‚ñ™Ô∏è –ù–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞
‚ñ™Ô∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∑–æ–Ω–∞–º (–ë –¶ –î)
‚ñ™Ô∏è –ó–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
‚ñ™Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–æ–±—â–∏–µ –∏–ª–∏ –æ—Å–æ–±—ã–µ)
‚ñ™Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
‚ñ™Ô∏è –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫</blockquote>

‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
<blockquote>‚ñ™Ô∏è <b>"–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞–Ω–∞–ª–∞"</b> - –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ç–æ—Ä–æ–º –∑–∞–∫–æ–Ω—á–µ–Ω–∞
‚ñ™Ô∏è <b>"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥–∏–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"</b> - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ç–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</blockquote>
"""
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back_to_instructions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        instructions,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def show_current_outputs_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructions = """
<b>üñ•Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã</b>

<b>1Ô∏è‚É£ <u>–®–∞–≥ 1: –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤</u></b>
üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤

<b>2Ô∏è‚É£ <u>–®–∞–≥ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∞–∫—Ç–æ—Ä–µ</u></b>
üîπ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:
<blockquote>‚ñ™Ô∏è –ù–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞
‚ñ™Ô∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∑–æ–Ω–∞–º (–ë –¶ –î)
‚ñ™Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–¥–∞–Ω–∏—è
‚ñ™Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–æ–±—â–∏–µ –∏–ª–∏ –æ—Å–æ–±—ã–µ)
‚ñ™Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–æ–Ω–∞–º
‚ñ™Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫</blockquote>

<b>3Ô∏è‚É£ <u>–®–∞–≥ 3: –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</u></b>
üîπ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ:
<blockquote>‚ñ™Ô∏è <b>"–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞–Ω–∞–ª–∞"</b> - —É–¥–∞–ª—è–µ—Ç —Ä–µ–∞–∫—Ç–æ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
‚ñ™Ô∏è <b>"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥–∏–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"</b> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ç–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</blockquote>
"""
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back_to_instructions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        instructions,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def show_ranges_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructions = """
<b>üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω</b>

<b>1Ô∏è‚É£ <u>–®–∞–≥ 1: –û–±—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã</u></b>
üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–æ–Ω:
<blockquote>‚ñ™Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–æ–Ω—ã (<b>–ë</b>, <b>–¶</b> –∏–ª–∏ <b>–î</b>)
‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞: <code>–º–∏–Ω –º–∞–∫—Å</code>

–ü—Ä–∏–º–µ—Ä: <code>+2 0</code></blockquote>

<b>2Ô∏è‚É£ <u>–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤</u></b>
üîπ –ù–∞–∂–º–∏—Ç–µ <b>"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω —Å—Ä–∞–∑—É"</b>
üîπ –í–≤–µ–¥–∏—Ç–µ 6 —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<blockquote><code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>
üîπ –ü—Ä–∏–º–µ—Ä: <code>+2 0 +1 -1 0 -1</code></blockquote>

<b>3Ô∏è‚É£ <u>–®–∞–≥ 3: –û—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞</u></b>
üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
<blockquote>‚ñ™Ô∏è –í —Å–ø–∏—Å–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –æ—Å–æ–±—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
‚ñ™Ô∏è –ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è:
  üî∏ <b>"–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã"</b> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ—Å–æ–±—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  üî∏ <b>"–£–¥–∞–ª–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã"</b> - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—â–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º</blockquote>

<b>4Ô∏è‚É£ <u>–®–∞–≥ 4: –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤</u></b>
üîπ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
<blockquote>‚ñ™Ô∏è –¢–µ–∫—É—â–∏–µ –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∑–æ–Ω –ë, –¶, –î
‚ñ™Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã</blockquote>
"""
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back_to_instructions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        instructions,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def handle_instruction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "instruction_new_output":
        await show_new_output_instruction(update, context)
    elif query.data == "instruction_current_outputs":
        await show_current_outputs_instruction(update, context)
    elif query.data == "instruction_ranges":
        await show_ranges_instruction(update, context)
    elif query.data == "back_to_instructions":
        await show_instructions(update, context)

async def show_active_outputs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_outputs:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤")
        return
        
    keyboard = []
    for reactor_id in active_outputs:
        keyboard.append([InlineKeyboardButton(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_id}", callback_data=f"show_{reactor_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ç–æ—Ä:", reply_markup=reply_markup)

def parse_range(input_str: str) -> Tuple[float, float]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    try:
        values = input_str.strip().split()
        if len(values) != 2:
            raise ValueError
        
        start = float(values[0].replace(',', '.'))
        end = float(values[1].replace(',', '.'))
        
        return start, end
    except:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º")

async def show_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_id not in user_ranges:
        user_ranges[user_id] = {
            'B': (DEFAULT_RANGES[0], DEFAULT_RANGES[1]),
            'C': (DEFAULT_RANGES[2], DEFAULT_RANGES[3]),
            'D': (DEFAULT_RANGES[4], DEFAULT_RANGES[5])
        }
    
    ranges = user_ranges[user_id]
    message = "üåê –û–±—â–∏–µ —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n\n"
    message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
    message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
    message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
    
    keyboard = [
        [
            InlineKeyboardButton("–ë", callback_data="range_B"),
            InlineKeyboardButton("–¶", callback_data="range_C"),
            InlineKeyboardButton("–î", callback_data="range_D")
        ],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω —Å—Ä–∞–∑—É", callback_data="range_all")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤ —Å –æ—Å–æ–±—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    if user_id in reactor_specific_ranges:
        message += "\n\nüìç –†–µ–∞–∫—Ç–æ—Ä—ã —Å –æ—Å–æ–±—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏:"
        for reactor_id in reactor_specific_ranges[user_id]:
            keyboard.append([
                InlineKeyboardButton(f"–†–µ–∞–∫—Ç–æ—Ä {reactor_id}", 
                                   callback_data=f"show_reactor_ranges_{reactor_id}")
            ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def handle_range_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    zone = query.data.split('_')[1]
    context.user_data['editing_range'] = zone
    
    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–º–∏–Ω –º–∞–∫—Å</code>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0</code>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ranges")]])
    )

async def set_range_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['state'] = 'waiting_all_ranges'
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0 +1 -1 0 -1</code>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ranges")]])
    )

async def process_all_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        values = [float(x.replace(',', '.')) for x in update.message.text.strip().split()]
        if len(values) != 6:
            raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ 6 —á–∏—Å–µ–ª")
        
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞
        if 'setting_reactor_ranges' in context.user_data:
            reactor_id = context.user_data['setting_reactor_ranges']
            if user_id not in reactor_specific_ranges:
                reactor_specific_ranges[user_id] = {}
            
            reactor_specific_ranges[user_id][reactor_id] = {
                'B': (values[0], values[1]),
                'C': (values[2], values[3]),
                'D': (values[4], values[5])
            }
            del context.user_data['setting_reactor_ranges']
            await update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if user_id not in user_ranges:
                user_ranges[user_id] = {}
            
            user_ranges[user_id]['B'] = (values[0], values[1])
            user_ranges[user_id]['C'] = (values[2], values[3])
            user_ranges[user_id]['D'] = (values[4], values[5])
            
            if 'state' in context.user_data:
                del context.user_data['state']
            
            await update.message.reply_text("‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        await show_ranges(update, context)
        
    except ValueError as e:
        await update.message.reply_text(str(e))
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.clear()

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if query.data.startswith("show_"):
            if query.data.startswith("show_reactor_ranges_"):
                reactor_id = query.data.split("_")[3]
                user_id = update.effective_user.id
                
                if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                    ranges = reactor_specific_ranges[user_id][reactor_id]
                    message = f"üìç –û—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id}:\n\n"
                    message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                    message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                    message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã", 
                                               callback_data=f"set_reactor_ranges_{reactor_id}"),
                            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã", 
                                               callback_data=f"delete_reactor_ranges_{reactor_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup)
            else:
                reactor_id = query.data.split("_")[1]
                if reactor_id in active_outputs:
                    output_data = active_outputs[reactor_id]
                    keyboard = [
                        [
                            InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞–Ω–∞–ª–∞", callback_data=f"finish_{reactor_id}"),
                            InlineKeyboardButton("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥–∏–º—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data=f"edit_{reactor_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(output_data["message"], reply_markup=reply_markup, parse_mode='HTML')
        
        elif query.data.startswith("edit_"):
            reactor_id = query.data.split("_")[1]
            if reactor_id in active_outputs:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
                current_mode = context.user_data.get('mode')
                
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –∏ –¥–æ–±–∞–≤–ª—è–µ–º editing_reactor
                if current_mode:
                    context.user_data['mode'] = current_mode
                # –ï—Å–ª–∏ mode –Ω–µ –±—ã–ª –≤ context.user_data, –±–µ—Ä–µ–º –µ–≥–æ –∏–∑ active_outputs
                elif 'mode' in active_outputs[reactor_id]:
                    context.user_data['mode'] = active_outputs[reactor_id]['mode']
                
                context.user_data['editing_reactor'] = reactor_id
                current_temps = active_outputs[reactor_id]["temps"]["current"]
                target_temps = active_outputs[reactor_id]["temps"]["target_temps"]
                
                await query.message.reply_text(
                    f"–†–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>\n\n"
                    f"‚åõÔ∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ë –¶ –î): <code>{' '.join(f'{temp:.1f}' for temp in current_temps)}</code>\n\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–¥–∞–Ω–∏—è (–ë –¶ –î): <code>{' '.join(f'{temp:.1f}' for temp in target_temps)}</code>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2</code>",
                    parse_mode='HTML'
                )
        
        elif query.data.startswith("finish_"):
            reactor_id = query.data.split("_")[1]
            if reactor_id in active_outputs:
                del active_outputs[reactor_id]
                await query.message.edit_text(f"–í—ã–≤–æ–¥ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
        
        elif query.data.startswith("set_reactor_ranges_"):
            reactor_id = query.data.split("_")[3]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_mode = context.user_data.get('mode')
            context.user_data.clear()
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if current_mode:
                context.user_data['mode'] = current_mode
            context.user_data['setting_reactor_ranges'] = reactor_id
            await query.message.reply_text(
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id}\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>–ë_–º–∏–Ω –ë_–º–∞–∫—Å –¶_–º–∏–Ω –¶_–º–∞–∫—Å –î_–º–∏–Ω –î_–º–∞–∫—Å</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+2 0 +1 -1 0 -1</code>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ranges")]])
            )
            
        elif query.data.startswith("delete_reactor_ranges_"):
            reactor_id = query.data.split("_")[3]
            user_id = update.effective_user.id
            
            if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                del reactor_specific_ranges[user_id][reactor_id]
                if not reactor_specific_ranges[user_id]:  # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∞–∫—Ç–æ—Ä
                    del reactor_specific_ranges[user_id]
                
                await query.message.edit_text(
                    f"‚úÖ –û—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É–¥–∞–ª–µ–Ω—ã"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                await show_ranges(update, context)
        
        elif query.data.startswith("range_"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mode –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_mode = context.user_data.get('mode')
            if query.data == "range_all":
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if current_mode:
                    context.user_data['mode'] = current_mode
                await set_range_all(update, context)
            else:
                context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if current_mode:
                    context.user_data['mode'] = current_mode
                await handle_range_callback(update, context)
                
        elif query.data == "back_to_ranges":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
            mode = context.user_data.get('mode')
            context.user_data.clear()
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if mode:
                context.user_data['mode'] = mode
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            await show_ranges(update, context)

    except Exception as e:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode='HTML')
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫—Ä–æ–º–µ mode
        current_mode = context.user_data.get('mode')
        context.user_data.clear()
        if current_mode:
            context.user_data['mode'] = current_mode

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –æ–¥–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if text in ["‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥", "üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã", "üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω", "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            mode = context.user_data.get('mode')
            current_reactor = context.user_data.get('current_reactor')
            # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            context.user_data.clear()
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if mode:
                context.user_data['mode'] = mode
            if current_reactor:
                context.user_data['current_reactor'] = current_reactor
            
        if text == "‚öôÔ∏è –ù–æ–≤—ã–π –≤—ã–≤–æ–¥":
            await update.message.reply_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞:\n\n"
                "<blockquote>–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
                "‚Ä¢ –ë—É–∫–≤–µ–Ω–Ω—ã–µ: <code>XX-X</code> –∏–ª–∏ <code>XXX</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–¢–ú-–ù</code> –∏–ª–∏ <code>–¢–ú–ù</code>)\n"
                "‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ: <code>Y-Y</code>, <code>YY-Y</code>, <code>YY</code> –∏–ª–∏ <code>YYY</code>\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1-1</code>, <code>11-1</code>, <code>11</code> –∏–ª–∏ <code>111</code>)</blockquote>",
                parse_mode='HTML'
            )
            context.user_data['state'] = 'waiting_reactor_number'
        
        elif text == "üñ•Ô∏è –¢–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã":
            await show_active_outputs(update, context)
            
        elif text == "üîß –†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–æ–Ω":
            await show_ranges(update, context)
        
        elif text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é":
            await show_instructions(update, context)
        
        elif context.user_data.get('state') == 'waiting_all_ranges':
            try:
                await process_all_ranges(update, context)
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
                mode = context.user_data.get('mode')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                context.user_data['state'] = 'waiting_all_ranges'
                if mode:
                    context.user_data['mode'] = mode
        
        elif 'editing_range' in context.user_data:
            try:
                zone = context.user_data['editing_range']
                start, end = parse_range(text)
                
                user_id = update.effective_user.id
                if user_id not in user_ranges:
                    user_ranges[user_id] = {}
                
                user_ranges[user_id][zone] = (start, end)
                del context.user_data['editing_range']
                
                await update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–æ–Ω—ã {zone} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                await show_ranges(update, context)
                
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–æ–Ω–µ
                zone = context.user_data.get('editing_range')
                mode = context.user_data.get('mode')
                if zone:
                    context.user_data['editing_range'] = zone
                if mode:
                    context.user_data['mode'] = mode
        
        elif context.user_data.get('state') == 'waiting_reactor_number':
            try:
                reactor_number = text.strip()
                
                if not validate_reactor_number(reactor_number):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n"
                        "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                        "‚Ä¢ –ë—É–∫–≤–µ–Ω–Ω—ã–µ: XX-X –∏–ª–∏ XXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–ú-–ù –∏–ª–∏ –¢–ú–ù)\n"
                        "‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ: Y-Y, YY-Y, YY –∏–ª–∏ YYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-1, 11-1, 11 –∏–ª–∏ 111)",
                        parse_mode='HTML'
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞
                    context.user_data['state'] = 'waiting_reactor_number'
                    return
                    
                reactor_id = get_reactor_id(reactor_number)
                if reactor_id in active_outputs:
                    await update.message.reply_text(
                        f"‚ùå –†–µ–∞–∫—Ç–æ—Ä <code>{reactor_id}</code> —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è!\n"
                        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞.",
                        parse_mode='HTML'
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞
                    context.user_data['state'] = 'waiting_reactor_number'
                    return
                    
                mode = get_reactor_mode(reactor_number)
                context.user_data['current_reactor'] = reactor_id
                context.user_data['mode'] = mode

                user_id = update.effective_user.id
                ranges_message = ""
                keyboard = []

                if user_id in reactor_specific_ranges and reactor_id in reactor_specific_ranges[user_id]:
                    ranges = reactor_specific_ranges[user_id][reactor_id]
                    ranges_message = "\nüìç –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Å–æ–±—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n"
                    ranges_message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                    ranges_message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                    ranges_message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                else:
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞", 
                                callback_data=f"set_reactor_ranges_{reactor_id}"
                            )
                        ]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω —Ä–µ–∞–∫—Ç–æ—Ä: <code>{reactor_id}</code>{ranges_message}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä] [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1000,0</code>\n"
                    "–∏–ª–∏: <code>1008.5 1003.7 1001.2 1040.0 1000.0 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1040,0 1000,0 1000,0</code>",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                context.user_data['state'] = 'waiting_temperatures'
                
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}", parse_mode='HTML')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                mode = context.user_data.get('mode')
                context.user_data['state'] = 'waiting_reactor_number'
                if mode:
                    context.user_data['mode'] = mode
        
        elif context.user_data.get('state') == 'waiting_temperatures' or 'editing_reactor' in context.user_data:
            try:
                reactor_id = context.user_data.get('editing_reactor') or context.user_data.get('current_reactor')
                await handle_temperatures(
                    update, 
                    context, 
                    reactor_id, 
                    active_outputs, 
                    user_ranges, 
                    reactor_specific_ranges
                )
                if 'editing_reactor' in context.user_data:
                    del context.user_data['editing_reactor']
            except ValueError as e:
                await update.message.reply_text(str(e), parse_mode='HTML')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
                mode = context.user_data.get('mode')
                current_reactor = context.user_data.get('current_reactor')
                editing_reactor = context.user_data.get('editing_reactor')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                context.user_data['state'] = 'waiting_temperatures'
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                if mode:
                    context.user_data['mode'] = mode
                if current_reactor:
                    context.user_data['current_reactor'] = current_reactor
                if editing_reactor:
                    context.user_data['editing_reactor'] = editing_reactor
        
        elif 'setting_reactor_ranges' in context.user_data:
            try:
                values = [float(x.replace(',', '.')) for x in text.strip().split()]
                if len(values) != 6:
                    raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ 6 —á–∏—Å–µ–ª")
                
                user_id = update.effective_user.id
                reactor_id = context.user_data['setting_reactor_ranges']
                
                if user_id not in reactor_specific_ranges:
                    reactor_specific_ranges[user_id] = {}
                
                reactor_specific_ranges[user_id][reactor_id] = {
                    'B': (values[0], values[1]),
                    'C': (values[2], values[3]),
                    'D': (values[4], values[5])
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ranges = reactor_specific_ranges[user_id][reactor_id]
                ranges_message = "\nüìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:\n"
                ranges_message += f"–ë: –æ—Ç {ranges['B'][0]:+.1f} –¥–æ {ranges['B'][1]:+.1f}\n"
                ranges_message += f"–¶: –æ—Ç {ranges['C'][0]:+.1f} –¥–æ {ranges['C'][1]:+.1f}\n"
                ranges_message += f"–î: –æ—Ç {ranges['D'][0]:+.1f} –¥–æ {ranges['D'][1]:+.1f}"
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–∫—Ç–æ—Ä–∞
                mode = get_reactor_mode(reactor_id)
                
                del context.user_data['setting_reactor_ranges']
                context.user_data['state'] = 'waiting_temperatures'
                context.user_data['current_reactor'] = reactor_id
                context.user_data['mode'] = mode
                
                await update.message.reply_text(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞ {reactor_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                    f"{ranges_message}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "[—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä] [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1008.5 1003.7 1001.2 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1000,0</code>\n"
                    "–∏–ª–∏: <code>1008.5 1003.7 1001.2 1040.0 1000.0 1000.0</code>\n"
                    "–∏–ª–∏: <code>1008,5 1003,7 1001,2 1040,0 1000,0 1000,0</code>",
                    parse_mode='HTML'
                )
                
            except ValueError as e:
                await update.message.reply_text(f"‚ùå {str(e)}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
                mode = context.user_data.get('mode')
                reactor_id = context.user_data.get('setting_reactor_ranges')
                if mode:
                    context.user_data['mode'] = mode
                if reactor_id:
                    context.user_data['setting_reactor_ranges'] = reactor_id

    except Exception as e:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode='HTML')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±—â–µ–π –æ—à–∏–±–∫–∏
        mode = context.user_data.get('mode')
        current_reactor = context.user_data.get('current_reactor')
        editing_reactor = context.user_data.get('editing_reactor')
        current_state = context.user_data.get('state')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mode:
            context.user_data['mode'] = mode
        if current_reactor:
            context.user_data['current_reactor'] = current_reactor
        if editing_reactor:
            context.user_data['editing_reactor'] = editing_reactor
        if current_state:
            context.user_data['state'] = current_state

def main():
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_instruction_callback, 
                          pattern="^(instruction_new_output|instruction_current_outputs|instruction_ranges|back_to_instructions)$"))
    application.add_handler(CallbackQueryHandler(handle_callback))  # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
